# -*- coding: utf-8 -*-
# -----------------------------------------------------------------------------
# Copyright 2015-2016 by Qcircuits Authors, see AUTHORS for more details.
#
# Distributed under the terms of the BSD license.
#
# The full license is in the file LICENCE, distributed with this software.
# -----------------------------------------------------------------------------
"""The manifest contributing the extensions to the main application.

"""
from __future__ import (division, unicode_literals, print_function,
                        absolute_import)

import os

import enaml
from enaml.workbench.api import PluginManifest, Extension, ExtensionPoint
from exopy.app.api import AppStartup
from exopy.tasks.api import Tasks, Task, Interface
from exopy_pulses.pulses.api import Context, Contexts, Shape, Shapes
from exopy.instruments.api import (Starter, Connection, Drivers, Driver,
                                  Settings)

from .instruments.starters.ZIQCircuitStarter import ZIQCircuitStarter


enamldef QcircuitsManifest(PluginManifest):
    """The manifest declaring the extension points to the Exopy.

    """
    id = 'exopy_qcircuits'

    Extension:
        point = 'exopy.instruments.drivers'
        Drivers:
            path = 'exopy_qcircuits.instruments.drivers'
            architecture = 'Qcircuits'
            Drivers:
                path = 'visa'
                starter = 'exopy_hqc_legacy.starter.visa'
                Drivers:
                    manufacturer = 'Tabor'
                    Driver:
                        driver = 'tabor_awg:TaborAWG'
                        model = 'WX1284C'
                        kind = 'AWG'
                        connections = {'VisaGPIB': {'resource_class': 'INSTR'},
                                       'VisaUSB': {'resource_class': 'INSTR'},
                                       'VisaTCPIP': {'resource_class': 'INSTR'},
                                       'VisaRaw': {}
                                       }
                Drivers:
                    manufacturer = 'Keysight'
                    Driver:
                        driver = 'keysight_ena:KeysightENA'
                        model = 'ENA'
                        connections = {'VisaGPIB': {'resource_class': 'INSTR'},
                                       'VisaUSB': {'resource_class': 'INSTR'},
                                       'VisaTCPIP': {'resource_class': 'INSTR'}
                                       }
                Drivers:
                    manufacturer = 'Rohde and Schwarz'
                    Driver:
                        driver = 'rohde_and_schwarz_psa:RohdeAndSchwarzPSA'
                        model = 'PSA'
                        connections = {'VisaGPIB': {'resource_class': 'INSTR'},
                                       'VisaTCPIP': {'resource_class': 'INSTR'}
                                       }
                Drivers:
                    manufacturer = 'Tenma'
                    Driver:
                        driver = 'tenma:Tenma'
                        model = '72-2535'
                        connections = {'VisaRS232': {'resource_class': 'INSTR'}}

            Drivers:
                path = 'dll'
                starter = 'exopy_hqc_legacy.starter.dll'
                connections = {'LegacyDLLConnection': {}}
                Driver:
                    driver = 'alazar935x:Alazar935x'
                    manufacturer = 'AlazarTech'
                    model = 'ATS9350'
                Driver:
                    driver = 'labbrick:LabBrickLMS103'
                    manufacturer = 'LabBrick'
                    model = 'LMS103'
                    kind = 'RF source'
                Driver:
                    driver = 'teledyneADQ32:TeledyneADQ32'
                    manufacturer = 'Teledyne SP Devices'
                    model = 'ADQ32'
                    
                                       
            Drivers:
                path='ZI'
                starter = 'exopy_qcircuit.starter.ZI'
                connections = {'QcircuitZIConnection': {}}
                Driver:
                    driver = 'UHFLI:UHFLI'
                    manufacturer = 'ZurichInstruments'
                    model = 'UHFLI'
                Driver:
                    driver = 'HDAWG:HDAWG'
                    manufacturer = 'ZurichInstruments'
                    model = 'HDAWG'
                    
    Extension:
        id = 'instrumentsqcircuit.starters'
        point = 'exopy.instruments.starters'
        Starter:
            id = 'exopy_qcircuit.starter.ZI'
            description = ('Starter for legacy instruments from ZI')
            starter = ZIQCircuitStarter()
            
    Extension:
        id = 'instrumentsqcircuit.connections'
        point = 'exopy.instruments.connections'
        Connection:
            id = 'QcircuitZIConnection'
            description = ('Connection for instruments from ZI.')
            new => (workbench, defaults, read_only):
                with enaml.imports():
                    from .instruments.connections.ZI_connection\
                        import ZIConnection
                defaults = dict(serial_number=defaults.get('serial_number',''))

                return ZIConnection(read_only=read_only, declaration=self,
                                     **defaults)

    Extension:
        id = 'exopy_qcircuits.tasks'
        point = 'exopy.tasks.declarations'
        Tasks:
            group = 'instr'
            Task:
                task = 'exopy_hqc_legacy.SetDCVoltageTask'
                instruments = ['exopy_qcircuits.Qcircuits.Tenma']
            Task:
                task = 'exopy_hqc_legacy.SetDCCurrentTask'
                instruments = ['exopy_qcircuits.Qcircuits.Tenma']
            Task:
                task = 'exopy_hqc_legacy.SetDCOutputTask'
                instruments = ['exopy_qcircuits.Qcircuits.Tenma']

        Tasks:
            path = 'exopy_qcircuits.tasks.tasks'
            Tasks:
                path='utils'
                group='instr'
                Task:
                    task = 'Fluxonium_tasks:FitRamseyTask'
                    view = 'views.Fluxonium_views:FitRamseyView'
                Task:
                    task = 'Fluxonium_tasks:FluxoniumFluxMapArrayTask'
                    view = 'views.Fluxonium_views:FluxoniumFluxMapArrayView'
                Task:
                    task = 'Fluxonium_tasks:FindFluxDetuningTask'
                    view = 'views.Fluxonium_views:FindFluxDetuningView'
                Task:
                    task = 'Fluxonium_tasks:FindFluxDetuning2Task'
                    view = 'views.Fluxonium_views:FindFluxDetuning2View'
            Tasks:
                path = 'instr'
                group = 'instr'
                Task:
                    task = 'rtacquisition_tasks:RealTimeAcquisitionTask'
                    view = 'views.rtacquisition_views:RealTimeAcquisitionView'
                    instruments = ['exopy_qcircuits.Qcircuits.Alazar935x']
                    Interface:
                        interface = 'rtacquisition_tasks:TeledyneInterface'
                        views = ['views.rtacquisition_views:ITeledyneSamplingLabel', 
                                 'views.rtacquisition_views:ITeledyneSamplingValue']
                        instruments = ['exopy_qcircuits.Qcircuits.TeledyneADQ32']

                Task:
                    task = 'RFpulsed_task:SetRFPulsedTask'
                    view = 'views.RFpulsed_views:SetRFPulsedView'
                    instruments = ['exopy_hqc_legacy.Legacy.Anapico']
                Task:
                    task = 'alazar_tasks:DemodAlazarTask'
                    view = 'views.alazar_views:DemodAlazarView'
                    instruments = ['exopy_qcircuits.Qcircuits.Alazar935x']
                Task:
                    task = 'alazar_tasks:FFTAlazarTask'
                    view = 'views.alazar_views:FFTAlazarView'
                    instruments = ['exopy_qcircuits.Qcircuits.Alazar935x']
                Task:
                    task = 'alazar_tasks:VNAAlazarTask'
                    view = 'views.alazar_views:VNAAlazarView'
                    instruments = ['exopy_qcircuits.Qcircuits.Alazar935x']                
                Task:
                    task = 'ena_tasks:ENASweepTask'
                    view = 'views.ena_views:ENASweepView'
                    instruments = ['exopy_qcircuits.Qcircuits.KeysightENA']
                Task:
                    task = 'ena_tasks:ENAGetTracesTask'
                    view = 'views.ena_views:ENAGetTracesView'
                    instruments = ['exopy_qcircuits.Qcircuits.KeysightENA']
                Task:
                    task = 'psa_tasks:PSAGetSpectrumTask'
                    view = 'views.psa_views:PSAGetSpectrumView'
                    instruments = ['exopy_qcircuits.Qcircuits.RohdeAndSchwarzPSA']
                Task:
                    task = 'psa_tasks:PSAGetFrequencyPointTask'
                    view = 'views.psa_views:PSAGetFrequencyPointView'
                    instruments = ['exopy_qcircuits.Qcircuits.RohdeAndSchwarzPSA']
                Task:
                    task = 'UHFLI_tasks:ScopeDemodUHFLITask'
                    view = 'views.UHFLI_views:ScopeDemodUHFLIView'
                    instruments = ['exopy_qcircuits.Qcircuits.UHFLI']
                Task: 
                    task = 'UHFLI_tasks:DemodUHFLITask'
                    view = 'views.UHFLI_views:DemodUHFLIView'
                    instruments = ['exopy_qcircuits.Qcircuits.UHFLI']
                Task:
                    task = 'UHFLI_tasks:PulseTransferUHFLITask'
                    view = 'views.UHFLI_views:PulseTransferUHFLIView'
                    instruments = ['exopy_qcircuits.Qcircuits.UHFLI']
                Task:
                    task = 'UHFLI_tasks:SetParametersUHFLITask'
                    view = 'views.UHFLI_views:SetParametersUHFLIView'
                    instruments = ['exopy_qcircuits.Qcircuits.UHFLI']
                Task:
                    task = 'UHFLI_tasks:CloseAWGUHFLITask'
                    view = 'views.UHFLI_views:CloseAWGUHFLIView'
                    instruments = ['exopy_qcircuits.Qcircuits.UHFLI']
                Task:
                    task = 'UHFLI_tasks:DAQDemodUHFLITask'
                    view = 'views.UHFLI_views:DAQDemodUHFLIView'
                    instruments = ['exopy_qcircuits.Qcircuits.UHFLI']
                Task:
                    task = 'HDAWG_tasks:StartStopHDAWGTask'
                    view = 'views.HDAWG_views:StartStopHDAWGView'
                    instruments = ['exopy_qcircuits.Qcircuits.HDAWG']
                Task:
                    task = 'HDAWG_tasks:PulseTransferHDAWGTask'
                    view = 'views.HDAWG_views:PulseTransferHDAWGView'
                    instruments = ['exopy_qcircuits.Qcircuits.HDAWG']
                Task:
                    task = 'HDAWG_tasks:SetParametersHDAWGTask'
                    view = 'views.HDAWG_views:SetParametersHDAWGView'
                    instruments = ['exopy_qcircuits.Qcircuits.HDAWG']
                Task:
                    task = 'HDAWG_tasks:OutputOnOffHDAWGTask'
                    view = 'views.HDAWG_views:OutputOnOffHDAWGView'
                    instruments = ['exopy_qcircuits.Qcircuits.HDAWG']
                Task:
                    task = 'AWG_tasks:AWGSetDCOffsetTask'
                    view = 'views.AWG_views:AWGSetDCOffsetView'
                    instruments = ['exopy_qcircuits.Qcircuits.TaborAWG']
                Task:
                    task = 'AWG_tasks:AWGSetVppTask'
                    view = 'views.AWG_views:AWGSetVppView'
                    instruments = ['exopy_qcircuits.Qcircuits.TaborAWG','exopy_hqc_legacy.Legacy.AWG']
                Task:
                    task = 'AWG_tasks:AWGSetMarkerTask'
                    view = 'views.AWG_views:AWGSetMarkerView'
                    instruments = ['exopy_qcircuits.Qcircuits.TaborAWG','exopy_hqc_legacy.Legacy.AWG']
                Task:
                    task = 'tune_IQ_mixer:TuneIQMixerTask'
                    view = 'views.tune_IQ_mixer_views:TuneIQmixerView'
                    instruments = ['exopy_qcircuits.Qcircuits.TaborAWG']
                Task:
                    task = 'transfer_pulse_loop_task:TransferPulseLoopTask'
                    view = ('views.transfer_pulse_loop_task_view:'
                            'TransferPulseLoopView')
                    # Way to declare instrument dependencies without specifying
                    # any instrument.
                    instruments = [None]
                Task:
                    task = 'transfer_awg_file_task:TransferAWGFileTask'
                    view = ('views.transfer_awg_file_task_view:'
                            'TransferAWGFileView')
                    # Way to declare instrument dependencies without specifying
                    # any instrument.
                    instruments = [None]
                Task:
                    task = 'get_awg_config_task:GetAWGConfigTask'
                    view = ('views.get_awg_config_task_view:'
                            'GetAWGConfigView')
                    instruments = ['exopy_hqc_legacy.Legacy.AWG']
                Task:
                    task = 'rf_ENA_tasks:SetRFENAPowerTask'
                    view = 'views.rf_ENA_views:RFPowerView'
                    Interface:
                        interface = 'ena_tasks:PNASetRFPowerInterface'
                        views = ['views.ena_views:IPNAChannelLabel',
                                 'views.ena_views:IPNAChannelValue',
                                 'views.ena_views:IPNAPortLabel',
                                 'views.ena_views:IPNAPortValue']
                        instruments = ['exopy_qcircuits.Qcircuits.KeysightENA']
            Tasks:
                path = 'util'
                group = 'util'

                Task:
                    task = 'smart_save_task:SmartSaveTask'
                    view = 'views.smart_save_view:SmartSaveView'


    Extension:
        id = 'contexts'
        point = 'exopy.pulses.contexts'
        Contexts:
            path = 'exopy_qcircuits.pulses.contexts'
            Context:
                context = 'awg_context:TaborAWGContext'
                view = 'views.awg_context_view:TaborAWGContextView'
                instruments = ['exopy_qcircuits.Qcircuits.TaborAWG']

    Extension:
        id = 'shapes'
        point = 'exopy.pulses.shapes'
        Shapes:
            path = 'exopy_qcircuits.pulses.shapes'
            Shape:
                shape = 'gaussian_shape:GaussianShape'
                view = 'views.gaussian_shape_view:GaussianShapeView'
            Shape:
                shape = 'gaussian_shape:GaussianEdgeShape'
                view = 'views.gaussian_shape_view:GaussianEdgeShapeView'
            Shape:
                shape = 'arbitrary_shape:ArbitraryShape'
                view = 'views.arbitrary_shape_view:ArbitraryShapeView'
            Shape:
                shape = 'gaussian_shape:SechShape'
                view = 'views.gaussian_shape_view:SechShapeView'
            Shape:
                shape = 'gaussian_shape:GaussienDerivativeShape'
                view = 'views.gaussian_shape_view:GaussienDerivativeShapeView'
